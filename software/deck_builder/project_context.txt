# YU-GI-OH! DECK BUILDER - COMPLETE CODEBASE ANALYSIS
# FOR CURSOR IDE CHAT CONSUMPTION
# Generated: 2025-01-27

## PROJECT OVERVIEW
Name: deck_builder
Version: 1.0.0
Type: ES Module Node.js application
Live Demo: https://deck-builder-1zmo2jgsz-damis-projects-d9dfe582.vercel.app/
Purpose: Multi-user Yu-Gi-Oh! card search and deck building web application

## CORE FUNCTIONALITY
- Advanced card search by name, attribute, archetype, type, level, and race
- Access to complete Yu-Gi-Oh! Pro Deck API database
- Personal favorites management with multi-user isolation
- Responsive Bootstrap-based interface
- Deck advisor chatbot interface (UI only, backend not implemented)
- Ready for production deployment on Vercel

## USER FLOWS
1. Search: Enter card criteria in search form
2. Select: Browse search results and click cards for details
3. Build/Save: Add cards to favorites, manage personal collection
4. Consult: Access deck advisor for guidance (placeholder functionality)

## ARCHITECTURE SUMMARY
Frontend: EJS templates + Bootstrap 5 + Vanilla JavaScript
Backend: Express.js server with EJS view engine
External APIs: YGOPRODeck API for card data
Persistence: Cookie-based favorites storage (client-side)
Deployment: Vercel serverless functions

## TECHNOLOGY STACK

### Backend Dependencies (package.json:18-25)
- express: ^4.19.2 (web framework)
- ejs: ^3.1.10 (template engine)
- cookie-parser: ^1.4.7 (cookie parsing)
- node-fetch: ^3.3.2 (HTTP client)
- openai: ^4.56.1 (AI integration - unused)
- body-parser: ^1.20.2 (request parsing)
- dotenv: ^16.4.5 (environment variables)
- express-session: ^1.18.2 (session management - unused in current implementation)

### Frontend Dependencies
- Bootstrap: 5.3.3 (CSS framework, loaded via CDN)
- Custom CSS: Matrix-style theme with #5263a3 primary color
- Fonts: MatrixRegularSmallCaps.otf (custom), proxima-nova, Garamond

### Build & Deployment
- Node.js: ES Modules compatible (Node 14+)
- Vercel: @vercel/node runtime
- Scripts: start/dev (local), vercel (production)

## FILE STRUCTURE

```
Deck_Builder/
‚îú‚îÄ‚îÄ index.js                 # Main Express app (Vercel entry point)
‚îú‚îÄ‚îÄ server.js                # Local development server
‚îú‚îÄ‚îÄ package.json             # Dependencies and scripts
‚îú‚îÄ‚îÄ vercel.json              # Vercel deployment config
‚îú‚îÄ‚îÄ views/                   # EJS templates
‚îÇ   ‚îú‚îÄ‚îÄ index.ejs           # Homepage with search form
‚îÇ   ‚îú‚îÄ‚îÄ search-post.ejs     # Search results display
‚îÇ   ‚îú‚îÄ‚îÄ favorite.ejs        # Favorites management
‚îÇ   ‚îî‚îÄ‚îÄ advisor.ejs         # Deck advisor chatbot
‚îú‚îÄ‚îÄ public/                  # Static assets
‚îÇ   ‚îú‚îÄ‚îÄ styles/main.css     # Custom styling
‚îÇ   ‚îú‚îÄ‚îÄ images/             # App icons and assets
‚îÇ   ‚îî‚îÄ‚îÄ fonts/              # MatrixRegularSmallCaps font
‚îî‚îÄ‚îÄ docs/                    # Implementation guides
    ‚îú‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ STARTUP_GUIDE.md
    ‚îî‚îÄ‚îÄ MULTI_USER_IMPLEMENTATION.md
```

## NPM SCRIPTS
- start: "node server.js" (local development)
- dev: "node server.js" (development mode)
- vercel: "node index.js" (Vercel production entry)
- test: placeholder (not implemented)

## EXTERNAL API INTEGRATION

### YGOPRODeck API
Base URL: https://db.ygoprodeck.com/api/v7/cardinfo.php
Implementation: index.js:58-75

Endpoint: /cardinfo.php
Method: GET
Query Parameters:
- name: Card name
- fName: Text within card name
- attribute: Monster attribute (LIGHT, DARK, etc.)
- archetype: Card archetype
- type: Card type (Normal Monster, Spell, Trap, etc.)
- level: Monster level
- race: Monster race (Dragon, Warrior, etc.)

Response Structure:
```json
{
  "data": [
    {
      "id": "89631139",
      "name": "Blue-Eyes White Dragon",
      "type": "Normal Monster",
      "desc": "This legendary dragon...",
      "atk": "3000",
      "def": "2500",
      "level": "8",
      "attribute": "LIGHT",
      "race": "Dragon",
      "card_images": [
        {
          "image_url_small": "https://...",
          "image_url": "https://..."
        }
      ]
    }
  ]
}
```

## SERVER-SIDE IMPLEMENTATION

### Express App Structure (index.js)
- Entry point exports app for Vercel compatibility
- Middleware: JSON parsing, URL encoding, static files, cookie parsing
- View engine: EJS with views directory
- Cookie-based favorites storage (Vercel compatible)

### Route Map
GET Routes:
- / (index.js:37-41): Homepage with search form
- /favorites (index.js:43-48): Display user favorites
- /advisor (index.js:50-55): Deck advisor interface
- /api/favorites (index.js:84-86): Retrieve user favorites
- /health (index.js:120-127): Vercel health check

POST Routes:
- /post-cards (index.js:57-82): Search cards via YGOPRODeck API
- /api/favorites (index.js:88-102): Add card to favorites

DELETE Routes:
- /api/favorites/:cardId (index.js:104-118): Remove card from favorites

### Error Handling
- Global error handler (index.js:135-140): Renders index view with error title
- 404 handler (index.js:129-133): Renders index view for missing routes
- Per-route error handling: Try-catch blocks with fallback rendering

### Server Configuration
- Local development: server.js handles app.listen() on port 3000
- Vercel production: index.js exports app without listening
- Environment detection: process.env.VERCEL === '1' for Vercel-specific logic

## CLIENT-SIDE IMPLEMENTATION

### Frontend Architecture
- No bundling: Vanilla JavaScript loaded directly in EJS templates
- Bootstrap CDN: External CSS/JS from jsdelivr.net
- Custom JavaScript: Inline scripts in EJS templates
- State management: Plain JavaScript with DOM manipulation

### EJS Templates

#### index.ejs (Homepage)
- Search form with 7 input fields (cardName, fName, attribute, archetype, type, level, race)
- Bootstrap navbar with Favorites and Deck Advisor links
- App description and branding
- Form submits to /post-cards via POST

#### search-post.ejs (Search Results)
- Bootstrap grid layout for card display
- Card images with hover effects and click interactions
- Modal overlay for card details (ATK, DEF, Level, Attribute, Description)
- Add to favorites functionality via API calls
- Server-side favorites loading and management

#### favorite.ejs (Favorites Management)
- Display user's saved cards
- Remove from favorites functionality
- API integration for favorites CRUD operations

#### advisor.ejs (Deck Advisor)
- Chat interface with message history
- User input form for questions
- Placeholder for AI responses (backend not implemented)
- Basic chat UI ready for future AI integration

### JavaScript Functionality
- Card search and filtering
- Favorites management (add/remove)
- Modal overlays for card details
- API communication with backend
- DOM manipulation and event handling

## DATA MODELS & STATE MANAGEMENT

### Card Object Structure
```javascript
{
  id: "89631139",                    // Unique card identifier
  name: "Blue-Eyes White Dragon",    // Card name
  type: "Normal Monster",            // Card type
  desc: "This legendary dragon...",  // Card description
  atk: "3000",                       // Attack points
  def: "2500",                       // Defense points
  level: "8",                        // Monster level
  attribute: "LIGHT",                // Monster attribute
  race: "Dragon",                    // Monster race
  card_images: [{                    // Image URLs
    image_url_small: "https://...",
    image_url: "https://..."
  }]
}
```

### Favorites Storage
- Location: HTTP cookies (client-side)
- Format: JSON stringified array of card objects
- Expiration: 30 days (maxAge: 30 * 24 * 60 * 60 * 1000)
- Security: httpOnly: true, secure in production, sameSite: 'lax'

### Multi-User Implementation
- Cookie-based user isolation
- Each user has independent favorites
- No shared state between users
- Session persistence across browser restarts

## STYLING & THEMING

### CSS Architecture
- Framework: Bootstrap 5.3.3 for layout and components
- Custom CSS: public/styles/main.css for app-specific styling
- No CSS modules or preprocessors

### Color Scheme
- Primary Background: #5263a3 (blue)
- Primary Text: #ffffff (white)
- Accent Color: #0FCB0F (green for buttons)
- Border Color: #000000 (black)

### Typography
- Primary Font: MatrixRegularSmallCaps.otf (custom Matrix-style)
- Secondary Font: proxima-nova, Garamond fallback
- Font Sizes: h1 (4rem), h2 (2.5rem), body (2rem)

### UI Components
- Card Components: .search-result class with hover effects
- Button Styles: Bootstrap buttons with custom green accent
- Layout: Bootstrap grid system with custom spacing
- Forms: Bootstrap form controls with custom styling

## DEPLOYMENT & CONFIGURATION

### Vercel Configuration (vercel.json)
```json
{
  "version": 2,
  "builds": [
    {
      "src": "index.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "index.js"
    }
  ]
}
```

### Environment Variables
- NODE_ENV: development/production toggle
- VERCEL: Vercel-specific environment detection
- No required API keys or secrets in current implementation

### Build Process
- Local: server.js starts Express server on port 3000
- Vercel: index.js exports app for serverless function
- Static assets served via express.static middleware

## IMPLEMENTATION STATUS

### Completed Features
‚úÖ Card search and filtering via YGOPRODeck API
‚úÖ Multi-user favorites management
‚úÖ Responsive Bootstrap UI
‚úÖ Card detail overlays
‚úÖ Favorites CRUD operations
‚úÖ Vercel deployment compatibility
‚úÖ Session isolation between users

### Partially Implemented
üü° Deck Advisor: UI complete, backend AI integration missing
üü° Multi-user: Cookie-based isolation working, but no user accounts

### Not Implemented
‚ùå Deck validation (size limits, banlist)
‚ùå Battle simulation and matchup analysis
‚ùå AI-powered deck recommendations
‚ùå Deck export/import functionality
‚ùå User authentication and accounts
‚ùå Database persistence (currently cookies only)

## FUTURE DEVELOPMENT ROADMAP

### Phase 1: Core Features
- Implement deck advisor AI backend using OpenAI API
- Add deck composition validation (40-60 card limits)
- Implement deck export/import functionality

### Phase 2: Advanced Features
- User account system with database persistence
- Deck sharing and community features
- Meta analysis and tier lists

### Phase 3: Game Features
- Basic battle simulation
- Matchup analysis and win rate calculation
- Tournament bracket management

## TECHNICAL CONSTRAINTS & CONSIDERATIONS

### Vercel Limitations
- Serverless function timeout limits
- No persistent file system
- Stateless architecture requirements
- Cookie-based storage limitations

### Performance Considerations
- No caching implementation for API calls
- Static assets served from public directory
- Bootstrap CDN for external dependencies
- No image optimization or lazy loading

### Security Considerations
- No authentication or authorization
- Cookie-based session management
- No input validation or sanitization
- No rate limiting on API endpoints

## DEBUGGING & DEVELOPMENT

### Local Development
- npm start: Runs server.js on port 3000
- Hot reload: Manual restart required
- Console logging: Session and API debugging
- Port conflicts: Check for existing processes on 3000

### Vercel Deployment
- vercel --prod: Production deployment
- Health check: /health endpoint for monitoring
- Logs: Vercel dashboard for debugging
- Environment: Production vs development detection

## CODE QUALITY & MAINTENANCE

### Code Organization
- Clear separation of concerns (routes, views, static assets)
- Consistent naming conventions
- Modular Express.js structure
- EJS template organization

### Documentation
- README.md: Project overview and features
- STARTUP_GUIDE.md: Local development setup
- MULTI_USER_IMPLEMENTATION.md: Technical implementation details
- Inline code comments for complex logic

### Testing
- No automated testing implemented
- Manual testing via browser interface
- Console logging for debugging
- Vercel deployment verification

## INTEGRATION POINTS

### External Services
- YGOPRODeck API: Primary card data source
- OpenAI API: Ready for AI integration (dependencies installed)
- Bootstrap CDN: UI framework and styling
- Vercel: Hosting and deployment platform

### Potential Extensions
- Database integration (MongoDB, PostgreSQL)
- Authentication service (Auth0, Firebase Auth)
- Image hosting (Cloudinary, AWS S3)
- Analytics and monitoring (Google Analytics, Sentry)

## CONCLUSION

The Yu-Gi-Oh! Deck Builder is a well-structured, production-ready web application with a solid foundation for future development. The current implementation provides core card search and favorites functionality with multi-user isolation. The codebase is organized for maintainability and follows modern web development practices. Key areas for future development include AI integration, deck validation, and enhanced user management features.

The application successfully demonstrates:
- Modern web development with Express.js and EJS
- External API integration with YGOPRODeck
- Responsive UI design with Bootstrap
- Multi-user architecture with cookie-based isolation
- Vercel deployment compatibility
- Clean code organization and documentation

This analysis provides a comprehensive understanding of the codebase for developers looking to maintain, extend, or integrate with the project. 